const {
    rdtsc, rdtsc0, rdtsc1,
    setThreadPriority,
    getThreadPriority,
    setProcessPriority,
    getProcessPriority,
    isWin
} = require('../build/Release/binding')

const THREAD_PRIORITY_IDLE = -15
const THREAD_PRIORITY_LOWEST = -2
const THREAD_PRIORITY_BELOW_NORMAL = -1
const THREAD_PRIORITY_NORMAL = 0
const THREAD_PRIORITY_ABOVE_NORMAL = 1
const THREAD_PRIORITY_HIGHEST = 2
const THREAD_PRIORITY_REALTIME = 15 // THREAD_PRIORITY_TIME_CRITICAL

const PROCESS_PRIORITY_IDLE = 0x00000040 // IDLE_PRIORITY_CLASS
const PROCESS_PRIORITY_BELOW_NORMAL = 0x00004000 // BELOW_NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_NORMAL = 0x00000020 // NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_ABOVE_NORMAL = 0x00008000 // ABOVE_NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_HIGHEST = 0x00000080 // HIGH_PRIORITY_CLASS
const PROCESS_PRIORITY_REALTIME = 0x00000100 // REALTIME_PRIORITY_CLASS

const runInRealtimePriority = function (func) {
    if (!isWin) {
        return func()
    }

    let previousThreadPriority = getThreadPriority()
    let previousProcessPriority = getProcessPriority()

    try {
        setProcessPriority(PROCESS_PRIORITY_REALTIME)
        setThreadPriority(THREAD_PRIORITY_REALTIME)

        return func()
    } finally {
        setProcessPriority(previousProcessPriority)
        setThreadPriority(previousThreadPriority)
    }
}

const WINDOW_MIN = 1000
const WINDOW_MAX = 100000

const PerfAnalyser = function (windowTimeNanoseconds, invertErfMin, invertErfMax) {
    if (windowTimeNanoseconds <= 0) {
        throw  new Error("windowTime <= 0")
    }

    let data_i = 0
    let data = new Array(WINDOW_MAX)
    let data_sqr = new Array(WINDOW_MAX)
    let window
    let sum
    let sum_sqr
    let min
    let no_noise_min
    let isWindowFilled = false
    let startTime
    let totalCount = 0

    let emitValue = function (value) {
        if (isWindowFilled) {
            sum -= data[data_i]
            sum_sqr -= data_sqr[data_i]
        }

        let sqr = value * value
        data[data_i] = value
        data_sqr[data_i] = sqr
        totalCount++

        if(!isWindowFilled && data_i === 0) {
            sum = value
            sum_sqr = sqr
            min = value
            startTime = process.hrtime.bigint()
        } else {
            sum += value
            sum_sqr += sqr

            if (isWindowFilled) {
                let average = getAverage()
                if (average < min) {
                    min = average
                    no_noise_min = calcNoNoiseAverage()
                }
            } else if (value < min) {
                min = value
            }
        }

        data_i++

        if (startTime && process.hrtime.bigint() - startTime >= windowTimeNanoseconds) {
            startTime = null
            window = data_i
            if (window < WINDOW_MIN) {
                window = WINDOW_MIN
            }
            if (window > WINDOW_MAX) {
                window = WINDOW_MAX
            }
        }

        if (window && data_i >= window) {
            data_i = 0
            isWindowFilled = true
            min = getAverage()
            no_noise_min = calcNoNoiseAverage()
        }

        if (!isWindowFilled && data_i === 50) {
            startTime = process.hrtime.bigint()
        }
    }

    let getAverage = function () {
        let N = isWindowFilled ? window : data_i
        if (N === 0) return Number.NaN
        return sum / N
    }

    let getDispersion = function () {
        let N = isWindowFilled ? window : data_i
        if (N === 0) return Number.NaN
        let _1_N = 1 / N
        let M = sum * _1_N
        return sum_sqr * _1_N - M * M
    }

    let getDeltaValue = function (invertErf) {
        return invertErf * Math.sqrt(getDispersion() * 2)
    }

    let calcNoNoiseAverage = function () {
        let N = isWindowFilled ? window : data_i
        let M = sum / N
        let min = M - getDeltaValue(invertErfMin)
        let max = M + getDeltaValue(invertErfMax)
        let no_noise_sum = sum
        let no_noise_count = N
        for (let i = N; i--;) {
            let value = data[i]
            if (value > max || value < min) {
                no_noise_sum -= value
                no_noise_count--
            }
        }

        if (!no_noise_count) {
            return Number.NaN
        }

        return no_noise_sum / no_noise_count
    }

    return {
        emitValue,
        getMin: () => {
            return min
        }
    }
}

//inverse erf calculator https://keisan.casio.com/exec/system/1180573448
//excel function: erfinv(p) = Sqrt(GammInv(p,0.5,1))
const CALC_PERF_INV_ERF_MIN = 0.476936276 //(p=0.5) inverse erf of confidence probability for exclude noise
const CALC_PERF_INV_ERF_MAX = 0.088855990 //(p=0.1) inverse erf of confidence probability for exclude noise

const calcPerformance = function (func0, func1, testTimeMilliseconds, windowMilliseconds = 10) {
    let startTime = process.hrtime.bigint()
    let testTime = testTimeMilliseconds * 1000000 // to nano time
    window = windowMilliseconds * 1000000

    return runInRealtimePriority(() => {
        let data0 = new PerfAnalyser(window, CALC_PERF_INV_ERF_MIN, CALC_PERF_INV_ERF_MAX);

        if (!func0 || !func1) {
            func0 = func0 || func1
            if (!func0) {
                return undefined
            }

            do {
                let cycles0 = (rdtsc0(), func0(), rdtsc1())

                data0.emitValue(Number(cycles0));
            } while (process.hrtime.bigint() - startTime < testTime)

            return data0.getMin()
        }

        let data1 = new PerfAnalyser(window, CALC_PERF_INV_ERF_MIN, CALC_PERF_INV_ERF_MAX);

        let i = 0
        do {
            let cycles0, cycles1

            if (i % 2) {
                cycles0 = (rdtsc0(), func0(), rdtsc1())
                cycles1 = (rdtsc0(), func1(), rdtsc1())
            } else {
                cycles1 = (rdtsc0(), func1(), rdtsc1())
                cycles0 = (rdtsc0(), func0(), rdtsc1())
            }

            data0.emitValue(Number(cycles0));
            data1.emitValue(Number(cycles1));

            i++
        } while (process.hrtime.bigint() - startTime < testTime)

        return Number(data1.getMin() - data0.getMin())
    })
}

module.exports = {
    rdtsc,
    rdtsc0,
    rdtsc1,
    calcPerformance,
    isWin,

    setThreadPriority, // since only for Windows
    getThreadPriority, // since only for Windows

    THREAD_PRIORITY_IDLE,
    THREAD_PRIORITY_LOWEST,
    THREAD_PRIORITY_BELOW_NORMAL,
    THREAD_PRIORITY_NORMAL,
    THREAD_PRIORITY_ABOVE_NORMAL,
    THREAD_PRIORITY_HIGHEST,
    THREAD_PRIORITY_REALTIME,

    setProcessPriority, // since only for Windows
    getProcessPriority, // since only for Windows

    PROCESS_PRIORITY_IDLE,
    PROCESS_PRIORITY_BELOW_NORMAL,
    PROCESS_PRIORITY_NORMAL,
    PROCESS_PRIORITY_ABOVE_NORMAL,
    PROCESS_PRIORITY_HIGHEST,
    PROCESS_PRIORITY_REALTIME,

    runInRealtimePriority // since only for Windows
}
