const {
    rdtsc, rdtsc0, rdtsc1,
    setThreadPriority,
    getThreadPriority,
    setProcessPriority,
    getProcessPriority,
    isWin
} = require('../build/Release/binding')

const THREAD_PRIORITY_IDLE = -15
const THREAD_PRIORITY_LOWEST = -2
const THREAD_PRIORITY_BELOW_NORMAL = -1
const THREAD_PRIORITY_NORMAL = 0
const THREAD_PRIORITY_ABOVE_NORMAL = 1
const THREAD_PRIORITY_HIGHEST = 2
const THREAD_PRIORITY_REALTIME = 15 // THREAD_PRIORITY_TIME_CRITICAL

const PROCESS_PRIORITY_IDLE = 0x00000040 // IDLE_PRIORITY_CLASS
const PROCESS_PRIORITY_BELOW_NORMAL = 0x00004000 // BELOW_NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_NORMAL = 0x00000020 // NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_ABOVE_NORMAL = 0x00008000 // ABOVE_NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_HIGHEST = 0x00000080 // HIGH_PRIORITY_CLASS
const PROCESS_PRIORITY_REALTIME = 0x00000100 // REALTIME_PRIORITY_CLASS

const runInRealtimePriority = function (func) {
    if (!isWin) {
        return func()
    }

    let previousThreadPriority = getThreadPriority()
    let previousProcessPriority = getProcessPriority()

    try {
        setProcessPriority(PROCESS_PRIORITY_REALTIME)
        setThreadPriority(THREAD_PRIORITY_REALTIME)

        return func()
    } finally {
        setProcessPriority(previousProcessPriority)
        setThreadPriority(previousThreadPriority)
    }
}

const PerfAnalyser = function (window) {
    let data_i = 0
    let data = new Array(window)
    let data_sqr = new Array(window)
    let sum
    let sum_sqr
    let minDispersion
    let min
    let no_noise_min
    let isWindowFilled = false
    let totalCount = 0

    let emitValue = function (value) {
        if (isWindowFilled) {
            sum -= data[data_i]
            sum_sqr -= data_sqr[data_i]
        }

        let sqr = value * value
        data[data_i] = value
        data_sqr[data_i] = sqr
        totalCount++

        if(!isWindowFilled && data_i === 0) {
            sum = value
            sum_sqr = sqr
            min = value
        } else {
            sum += value
            sum_sqr += sqr

            if (isWindowFilled) {
                let dispersion = getDispersion()
                if (dispersion < minDispersion) {
                    minDispersion = dispersion
                    min = calcMin()
                }
            } else if (value < min) {
                min = value
            }
        }

        data_i++

        if (window && data_i >= window) {
            data_i = 0
            isWindowFilled = true
            minDispersion = getDispersion()
        }
    }

    // let getAverage = function () {
    //     let N = isWindowFilled ? window : data_i
    //     if (N === 0) return Number.NaN
    //     return sum / N
    // }

    let getDispersion = function () {
        let N = isWindowFilled ? window : data_i
        if (N === 0) return Number.NaN
        let _1_N = 1 / N
        let M = sum * _1_N
        return sum_sqr * _1_N - M * M
    }

    // let getAbsoluteError = function () {
    //     return Math.sqrt(getDispersion() * 2)
    // }
    //
    // let getRelativeError = function () {
    //     return getAbsoluteError() / min
    // }

    let calcMin = function () {
        let N = isWindowFilled ? window : data_i
        let min
        for (let i = N; i--;) {
            let value = data[i]
            if (min == null || value < min) {
                min = value
            }
        }

        return min;
    }

    // let calcNoNoiseAverage = function () {
    //     let N = isWindowFilled ? window : data_i
    //     let M = sum / N
    //     let min = M - getDeltaValue(invertErfMin)
    //     let max = M + getDeltaValue(invertErfMax)
    //     let no_noise_sum = sum
    //     let no_noise_count = N
    //     for (let i = N; i--;) {
    //         let value = data[i]
    //         if (value > max || value < min) {
    //             no_noise_sum -= value
    //             no_noise_count--
    //         }
    //     }
    //
    //     if (!no_noise_count) {
    //         return Number.NaN
    //     }
    //
    //     return no_noise_sum / no_noise_count
    // }

    return {
        emitValue,
        getResult: () => {
            return {
                min,
                totalCount,
                dispersion: minDispersion || getDispersion()
            }
        }
    }
}

//inverse erf calculator https://keisan.casio.com/exec/system/1180573448
//excel function: erfinv(p) = Sqrt(GammInv(p,0.5,1))
// const CALC_PERF_INV_ERF_MIN = 0.476936276 //(p=0.5) inverse erf of confidence probability for exclude noise
// const CALC_PERF_INV_ERF_MAX = 0.088855990 //(p=0.1) inverse erf of confidence probability for exclude noise

const calcPerformance = function (func0, func1, testTimeMilliseconds, window = 100000) {
    let testTime = testTimeMilliseconds * 1000000 // to nano time

    return runInRealtimePriority(() => {
        let data0 = new PerfAnalyser(window);
        let result;

        if (!func0 || !func1) {
            func0 = func0 || func1
            if (!func0) {
                return undefined
            }

            let startTime = process.hrtime.bigint()
            do {
                let cycles0 = (rdtsc0(), func0(), rdtsc1())

                data0.emitValue(Number(cycles0));
            } while (process.hrtime.bigint() - startTime < testTime)

            result = data0.getResult()
        } else {
            let data1 = new PerfAnalyser(window);

            let startTime = process.hrtime.bigint()
            let i = 0
            do {
                let cycles0, cycles1

                if (i % 2) {
                    cycles0 = (rdtsc0(), func0(), rdtsc1())
                    cycles1 = (rdtsc0(), func1(), rdtsc1())
                } else {
                    cycles1 = (rdtsc0(), func1(), rdtsc1())
                    cycles0 = (rdtsc0(), func0(), rdtsc1())
                }

                data0.emitValue(Number(cycles0));
                data1.emitValue(Number(cycles1));

                i++
            } while (process.hrtime.bigint() - startTime < testTime)

            let result0 = data0.getResult()
            let result1 = data1.getResult()

            result = {
                min: result1.min - result0.min,
                dispersion: result0.dispersion + result1.dispersion,
                totalCount: result0.totalCount
            }
        }

        //inverse erf calculator https://keisan.casio.com/exec/system/1180573448
        const inverseErf0_99 = 1.82138636771844967304
        const inverseErf0_90 = 1.16308715367667408672
        // https://en.wikipedia.org/wiki/Error_function#Applications
        let absoluteError = Math.sqrt(result.dispersion * 2) * inverseErf0_90
        let relativeError = result.min <= 0 ? null : absoluteError / result.min

        return {
            cycles: Number(result.min),
            absoluteError,
            relativeError,
            count: result.totalCount
        }
    })
}

module.exports = {
    rdtsc,
    rdtsc0,
    rdtsc1,
    calcPerformance,
    isWin,

    setThreadPriority, // since only for Windows
    getThreadPriority, // since only for Windows

    THREAD_PRIORITY_IDLE,
    THREAD_PRIORITY_LOWEST,
    THREAD_PRIORITY_BELOW_NORMAL,
    THREAD_PRIORITY_NORMAL,
    THREAD_PRIORITY_ABOVE_NORMAL,
    THREAD_PRIORITY_HIGHEST,
    THREAD_PRIORITY_REALTIME,

    setProcessPriority, // since only for Windows
    getProcessPriority, // since only for Windows

    PROCESS_PRIORITY_IDLE,
    PROCESS_PRIORITY_BELOW_NORMAL,
    PROCESS_PRIORITY_NORMAL,
    PROCESS_PRIORITY_ABOVE_NORMAL,
    PROCESS_PRIORITY_HIGHEST,
    PROCESS_PRIORITY_REALTIME,

    runInRealtimePriority // since only for Windows
}
