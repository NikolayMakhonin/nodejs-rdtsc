const {
    rdtsc, rdtsc0, rdtsc1,
    setThreadPriority,
    getThreadPriority,
    setProcessPriority,
    getProcessPriority,
    isWin
} = require('../build/Release/binding')

const fs = require('fs');
const WaveFile = require('wavefile')

const THREAD_PRIORITY_IDLE = -15
const THREAD_PRIORITY_LOWEST = -2
const THREAD_PRIORITY_BELOW_NORMAL = -1
const THREAD_PRIORITY_NORMAL = 0
const THREAD_PRIORITY_ABOVE_NORMAL = 1
const THREAD_PRIORITY_HIGHEST = 2
const THREAD_PRIORITY_REALTIME = 15 // THREAD_PRIORITY_TIME_CRITICAL

const PROCESS_PRIORITY_IDLE = 0x00000040 // IDLE_PRIORITY_CLASS
const PROCESS_PRIORITY_BELOW_NORMAL = 0x00004000 // BELOW_NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_NORMAL = 0x00000020 // NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_ABOVE_NORMAL = 0x00008000 // ABOVE_NORMAL_PRIORITY_CLASS
const PROCESS_PRIORITY_HIGHEST = 0x00000080 // HIGH_PRIORITY_CLASS
const PROCESS_PRIORITY_REALTIME = 0x00000100 // REALTIME_PRIORITY_CLASS

const runInRealtimePriority = function (func) {
    if (!isWin) {
        return func()
    }

    let previousThreadPriority = getThreadPriority()
    let previousProcessPriority = getProcessPriority()

    try {
        setProcessPriority(PROCESS_PRIORITY_REALTIME)
        setThreadPriority(THREAD_PRIORITY_REALTIME)

        return func()
    } finally {
        setProcessPriority(previousProcessPriority)
        setThreadPriority(previousThreadPriority)
    }
}

const calcPerformance0 = function (func0, func1, testTime) {

}

const calcPerformance = function (func0, func1, testTimeMilliseconds) {
    let startTime = process.hrtime.bigint()
    let testTime = testTimeMilliseconds * 1000000 // to nano time

    return runInRealtimePriority(() => {
        let minCycles0 = null
        let sum0 = BigInt(0)
        let sumSqr0 = BigInt(0)

        let dispersion
        let minCycles
        let count

        if (!func0 || !func1) {
            func0 = func0 || func1
            if (!func0) {
                return undefined
            }

            let N = 0
            do {
                let cycles0 = (rdtsc0(), func0(), rdtsc1())

                sum0 += cycles0
                sumSqr0 += cycles0 * cycles0
                N++

                if (minCycles0 == null || cycles0 < minCycles0) {
                    minCycles0 = cycles0
                }
            } while (process.hrtime.bigint() - startTime < testTime)

            minCycles = Number(minCycles0)

            let M0 = Number(sum0) / N
            dispersion = (Number(sumSqr0) / N - M0 * M0)
            count = N
        } else {
            let init = function() {
                minCycles0 = null
                minCycles1 = null
                sum0 = BigInt(0)
                sumSqr0 = BigInt(0)
                sum1 = BigInt(0)
                sumSqr1 = BigInt(0)
                N = 0
            }

            let minCycles1 = null
            let sum1 = BigInt(0)
            let sumSqr1 = BigInt(0)

            let minDispersion
            let minMinCycles0
            N = 10000

            let getDispersion = function(N) {
                let M0 = Number(sum0) / N
                let M1 = Number(sum1) / N
                let dispersion0 = (Number(sumSqr0) / N - M0 * M0)
                let dispersion1 = (Number(sumSqr1) / N - M1 * M1)
                return (dispersion0 + dispersion1) / N
            }

            let i = 0
            do {
                let cycles0, cycles1

                if (i % 2) {
                    cycles0 = (rdtsc0(), func0(), rdtsc1())
                    cycles1 = (rdtsc0(), func1(), rdtsc1())
                } else {
                    cycles1 = (rdtsc0(), func1(), rdtsc1())
                    cycles0 = (rdtsc0(), func0(), rdtsc1())
                }

                let diff = cycles1 - cycles0
                sum0 += diff
                sumSqr0 += diff * diff

                i++

                if (i % N === 0) {
                    dispersion = getDispersion(N)
                    if (minCycles == null || dispersion < minDispersion) {
                        minDispersion = dispersion
                        minCycles = Number(sum0) / N
                    }

                    sum0 = BigInt(0)
                    sumSqr0 = BigInt(0)
                    sum1 = BigInt(0)
                    sumSqr1 = BigInt(0)
                }
            } while (process.hrtime.bigint() - startTime < testTime)

            if (minCycles == null) {
                minCycles = Number(sum0) / N
                minDispersion = getDispersion(i)
            }

            dispersion = minDispersion
            count = i
        }

        //inverse erf calculator https://keisan.casio.com/exec/system/1180573448
        const inverseErf0_99 = 1.82138636771844967304
        const inverseErf0_90 = 1.16308715367667408672
        // https://en.wikipedia.org/wiki/Error_function#Applications
        let absoluteError = Math.sqrt(dispersion * 2) * inverseErf0_90
        let relativeError = minCycles <= 0 ? null : absoluteError / minCycles

        return {
            cycles: minCycles,
            absoluteError,
            relativeError,
            count
        }
    })
}

module.exports = {
    rdtsc,
    rdtsc0,
    rdtsc1,
    calcPerformance,
    isWin,

    setThreadPriority, // since only for Windows
    getThreadPriority, // since only for Windows

    THREAD_PRIORITY_IDLE,
    THREAD_PRIORITY_LOWEST,
    THREAD_PRIORITY_BELOW_NORMAL,
    THREAD_PRIORITY_NORMAL,
    THREAD_PRIORITY_ABOVE_NORMAL,
    THREAD_PRIORITY_HIGHEST,
    THREAD_PRIORITY_REALTIME,

    setProcessPriority, // since only for Windows
    getProcessPriority, // since only for Windows

    PROCESS_PRIORITY_IDLE,
    PROCESS_PRIORITY_BELOW_NORMAL,
    PROCESS_PRIORITY_NORMAL,
    PROCESS_PRIORITY_ABOVE_NORMAL,
    PROCESS_PRIORITY_HIGHEST,
    PROCESS_PRIORITY_REALTIME,

    runInRealtimePriority // since only for Windows
}
